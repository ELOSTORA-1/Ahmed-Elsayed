pipeline {
    agent any
    
    environment {
        SSH_CREDENTIALS_ID = '004d46ec-c37e-4940-94f7-57a32s58569eb'
        DEPLOY_SERVER = '172.22.194.77'
        DOTNET_VERSION = '9.0'
        DEPLOY_PATH = '/home/Ahmed-Elsayed/App/dotnet'
    }
    
    stages {
        stage('Fetch Code') {
            steps {
                git url: 'https://github.com/ELOSTORA-1/dotnet.git', branch: 'main'
            }
        }
        
        stage('Restore And Build') {
            steps {
                sh 'dotnet restore'
                sh 'dotnet build --configuration Release --no-restore'
            }
        }
        
        stage('Publish App') {
            steps {
                sh 'dotnet publish -c Release -o ./publish-output --no-build'
            }
        }
        
        stage('Deploy to Server') {
            steps {
                sshagent(credentials: ["${SSH_CREDENTIALS_ID}"]) {
                    sh """
                        # Create directory if it doesn't exist
                        ssh -o StrictHostKeyChecking=no root@${DEPLOY_SERVER} "mkdir -p ${DEPLOY_PATH}"
                        
                        # Copy published files
                        scp -o StrictHostKeyChecking=no -r ./publish-output/* root@${DEPLOY_SERVER}:${DEPLOY_PATH}/
                        
                        # Restart docker service
                        ssh -o StrictHostKeyChecking=no root@${DEPLOY_SERVER} 'systemctl restart docker'
                        
                        # Optional: List deployed files for verification
                        ssh -o StrictHostKeyChecking=no root@${DEPLOY_SERVER} "ls -la ${DEPLOY_PATH}/"
                    """
                }
            }
        }
    }
    
    post {
        failure {
            echo "pipeline failed"
        }
        success {
            echo "pipeline success"
        }
        always {
            cleanWs() // Clean workspace after build
        }
    }
}